
#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Router:

    relations = {}
    sockets = {}
    ports = {}
    routing_table = []  # Routing table to store information about neighbors
    routing_table_history = []
    revocation_history = []

    # Initialized the relations, neighbors, ports and sockets and also send handshake message to neighbors
    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    #Given the destination, break it ip into ip form
    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    # Send a message to given network
    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))
    
    # Send update message to given neighbor
    # Update on new entry of routing table
    def send_update_message(self, neighbor, msg_data):
        update_msg = {
            "msg": {
                "netmask": msg_data['msg']['netmask'],
                "ASPath": [self.asn] + msg_data['msg']['ASPath'],
                "network": msg_data['msg']['network'],
            },
            "src": self.our_addr(neighbor),
            "dst": neighbor,
            "type": "update",
        }

        # Build the message dynamically based on the current routing table and the specific format
        routing_table_json = json.dumps(update_msg)

        self.send(neighbor, routing_table_json)

    # Compare the first node of the given ips
    def compare_first_node(self, ip1, ip2):
        # Split the IP addresses by '.'
        ip1_parts = ip1.split('.')
        ip2_parts = ip2.split('.')

        # Compare the first node
        return ip1_parts[0] == ip2_parts[0]

    #Compare the given ips and return if they are equal
    def compare_ips(self, ip1, ip2):
        # Split the IP addresses into nodes
        ip1_nodes = ip1.split('.')
        ip2_nodes = ip2.split('.')
        
        # Initialize the match count
        match_count = 0
        
        # Compare each node of the IP addresses
        for i in range(min(len(ip1_nodes), len(ip2_nodes))):
            if ip1_nodes[i] == ip2_nodes[i]:
                match_count += 1
            else:
                break  # If a node doesn't match, stop comparing further
        
        return match_count

    # Find the next hop for the data message based on the network of current routing table
    def find_next_hop(self, destination):
        longest_match = None
        for entry in self.routing_table:
            network = entry.get('network')
            netmask = entry.get('netmask')
            peer = entry.get('peer')
            string = '?'
            # Check if the destination matches the network with the longest prefix
            if self.matches(destination, network, netmask):
                if longest_match is None and self.compare_ips(network, destination) > 0:
                    string = 'only route'
                    longest_match = entry
                if longest_match is not None:
                    if self.compare_ips(network, destination) > self.compare_ips(longest_match['network'], destination):
                        string = 'match'
                        longest_match = entry
                    elif self.prefix_length(netmask) > self.prefix_length(longest_match['netmask']):
                        longest_match = entry
                        string = 'prefix'
                    # Handle tie-breaking based on criteria
                    elif self.prefix_length(netmask) == self.prefix_length(longest_match['netmask']):
                        print("In equal compare %s and %s" % (peer, longest_match['peer']))
                        print(peer < longest_match.get('peer'))
                        if entry.get('localpref', 0) > longest_match.get('localpref', 0):
                            string = 'localpref'
                            longest_match = entry
                        elif entry.get('selfOrigin') != longest_match.get('selfOrigin'):
                            if longest_match.get('selfOrigin') and not entry.get('selfOrigin'):
                                continue
                            if entry.get('selfOrigin', False) and not longest_match.get('selfOrigin'):
                                string = 'selfOrigin'
                                longest_match = entry
                        elif len(entry.get('ASPath', [])) < len(longest_match.get('ASPath', [])):
                            string = 'ASPath'
                            longest_match = entry
                        elif entry.get('origin') < longest_match.get('origin'):
                            string = 'origin'
                            longest_match = entry
                        elif peer < longest_match.get('peer'):
                            print('in peer')
                            string = 'peer'
                            longest_match = entry

            print(string)
        if longest_match:
            return longest_match.get('peer')
        else:
            return None

    # Check if the ip match with the network and netmask
    def matches(self, ip, network, netmask):
        ip_parts = ip.split('.')
        network_parts = network.split('.')
        netmask_parts = netmask.split('.')
        for i in range(4):
            if (int(ip_parts[i]) & int(netmask_parts[i])) != (int(network_parts[i]) & int(netmask_parts[i])):
                return False
        return True

    # Count the prefix length of given netmask
    def prefix_length(self, netmask):
        return sum(bin(int(x)).count('1') for x in netmask.split('.'))

    # Send a data message to given ip
    def send_data_message(self, msg_data, srcif):
        # Build the message dynamically based on the current routing table and the specific format
        next_hop = self.find_next_hop(msg_data['dst'])
        routing_table_json = json.dumps(msg_data)
        if (next_hop == None):
            no_route_msg = {
                "msg": msg_data['msg'],
                "src": msg_data['src'],
                "dst": msg_data['dst'],
                "type": "no route",
            }
            routing_table_json = json.dumps(no_route_msg)
            print("No route")
            print("Sending back to")
            print(srcif)
            self.send(srcif, routing_table_json)
        else:
            print("Sending data message to")
            print(next_hop)
            self.send(next_hop, routing_table_json)
    
    # Send a withdraw message to given ip
    def handle_withdraw_message(self, msg_data, srcif):
        # Save a copy of the revocation message
        self.revocation_history.append(msg_data)

        # Remove the dead entry from the forwarding table
        for entry in msg_data['msg']:
            print('Deleting')
            print(srcif)
            self.routing_table = [route for route in self.routing_table if route.get('peer') != srcif ]
        # Send copies of the revocation to other neighboring routers
        for neighbor in self.sockets:
            if neighbor != msg_data['src']:
                self.send_withdraw_message(neighbor, msg_data)

    # Send withdraw messages to all neighbors except for the sender
    # Withdraw message signal that the given route is deleted from current routing table
    def send_withdraw_message(self, neighbor, msg_data):
        # Build the withdrawal message
        withdraw_msg = {
            "msg": msg_data['msg'],
            "src": self.our_addr(neighbor),
            "dst": neighbor,
            "type": "withdraw",
        }
        # Send the withdrawal message
        self.send(neighbor, json.dumps(withdraw_msg))


    # Sending table message back to sender of dump message
    # This function exposes the current routing table in this router
    def send_table_message(self, srcif):
        table_msg = {
            "src": self.our_addr(srcif),
            "dst": srcif,
            "type": "table",
            "msg": []
        }
        # Construct the routing table message
        for info in self.routing_table:
            table_entry = {
                "origin": info.get('origin', ''),
                "localpref": info.get('localpref', 0),
                "network": info.get('network', ''),
                "ASPath": info.get('ASPath', []),
                "netmask": info.get('netmask', ''),
                "peer": info.get('peer', ''),  
                "selfOrigin": info.get('selfOrigin', False),
            }
            table_msg["msg"].append(table_entry)
        print('Table message')
        print(table_msg)
        # Send the routing table message
        self.send(srcif, json.dumps(table_msg))

    # Handle message from neighbors and configure it accordingly with types and neighbor types
    def handle_message(self, msg, srcif):
        msg_data = json.loads(msg)
        neighbor_relation = self.relations.get(srcif)
        if msg_data["type"] == "update":
            route_info = msg_data["msg"]
            route_info["peer"] = srcif
            # Update the routing table with the new route information
            self.routing_table_history.append(route_info)
            #self.routing_table.append(route_info)
            self.aggregate(route_info)
            self.check()
            # Check if the relationship is "cust" or "peer" and store it in the routing table
            route_info["relation"] = neighbor_relation  
            # Forward the update message depending on the relationship
            if neighbor_relation == "cust":
                # If the neighbor is a "cust", forward the update to all neighbors
                for neighbor in self.sockets:
                    if neighbor != srcif:
                        self.send_update_message(neighbor, msg_data)
            elif neighbor_relation == "peer" or neighbor_relation == "prov":
                # If the neighbor is a "peer" or "prov", forward the update only to "cust" neighbors
                for neighbor in self.sockets:
                    if self.relations.get(neighbor) == "cust" and neighbor != srcif:
                        self.send_update_message(neighbor, msg_data)
                
        if msg_data["type"] == "data":
            if neighbor_relation in ["peer", "prov"] and self.relations.get(self.find_next_hop(msg_data["dst"])) in ["peer", "prov"]:
                print("Dropping data message from %s to %s as it is from peer/provider and destination is also peer/provider" % (srcif, msg_data["dst"]))
                return  # Drop the message
            else:
                # Otherwise, forward the data message
                self.send_data_message(msg_data, srcif)

        if msg_data["type"] == "dump":
            self.send_table_message(srcif)

        if msg_data["type"] == "withdraw":
            self.handle_withdraw_message(msg_data, srcif)

    # Aggregate the routing table if possible
    #
    def aggregate(self, route_info):
        print("Aggregate")
        boo = True
        
        # Iterate over the routing table entries
        for i, route in enumerate(self.routing_table):
            if self.can_aggregate(route, route_info) and route['network'] != route_info['network']:
                if self.can_aggregate(route, route_info) < 0:
                    print('before')
                    route['network'] = route_info['network']
                    route['netmask'] = self.decrease_netmask(route_info['netmask'], 1)
                else:
                    print("after")
                    route['netmask'] = self.decrease_netmask(route['netmask'], 1)
                
                print(route['network'])
                self.routing_table[i] = route
                boo = False     
        if boo:
            self.routing_table.append(route_info)

    # Check to loop among the current table and check for aggregation
    def check(self):
        for i, route in enumerate(self.routing_table):
            for j, route2 in enumerate(self.routing_table):
                if self.can_aggregate(route, route2):
                    self.aggregate(route)
                    break


    # Used mostly by aggregation
    # This function decrease the netmask by 1
    def decrease_netmask(self, netmask, num):
        # Split the netmask into octets
        octets = netmask.split('.')

        # Convert the last octet to an integer and decrement it by 1
        last_octet = int(octets[2])
        if last_octet > num:
            last_octet -= num

        # Update the last octet in the list
        octets[2] = str(last_octet)

        # Join the octets back into a string and return
        return '.'.join(octets)

    # Support func for aggregate
    # Given two ips, determine if the two are aggregatable (same peer, same network, etc)
    def can_aggregate(self, route1, route2):
        return (
            self.are_adjacent(route1["network"], route2["network"]) and
            route1.get("localpref") == route2.get("localpref") and
            route1.get("origin") == route2.get("origin") and
            route1.get("peer") == route2.get("peer") and
            route1.get("origin") == route2.get("origin") and
            route1.get("ASPath") == route2.get("ASPath") and
            route1.get("selfOrigin") == route2.get("selfOrigin")
        )

    # Given two ips, determine if the two are adjacent to each other or not
    def are_adjacent(self, ip1, ip2):
        ip1_parts = ip1.split('.')
        ip2_parts = ip2.split('.')
        # Convert IP parts to integers
        ip1_ints = [int(part) for part in ip1_parts]
        ip2_ints = [int(part) for part in ip2_parts]
        # Check if the last octet differs by exactly 1
        if abs(ip1_ints[2] - ip2_ints[2]) <= 3 and ip1_ints[0] == ip2_ints[0] and ip1_ints[1] == ip2_ints[1] :
            print("%s and %s are adjacent" % (ip1, ip2))
            return ip1_ints[2] - ip2_ints[2]
        else:
            return None

    # Read continuously from neighbors and fetch the components to the handle_message
    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                print("Received message '%s' from %s" % (msg, srcif))
                self.handle_message(msg, srcif)
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()